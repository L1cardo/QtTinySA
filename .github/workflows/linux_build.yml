name: Linux Build (x86_64 + ARM64)

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Linux x86_64 and ARM64 builds'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["x86_64", "arm64"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.12.0 -r src/requirements.txt

      - name: Install QEMU (for ARM64 cross-build)
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu libc6-dev-arm64-cross
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Build with PyInstaller (${{ matrix.arch }})
        run: |
          cd src
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export PIP_TARGET=./python_modules
            pip install --target ./python_modules -r requirements.txt
            sed -i "s/target_arch=None/target_arch='${{ matrix.arch }}'/" QtTinySA.spec
            pyinstaller QtTinySA.spec
          else
            pyinstaller QtTinySA.spec
          fi
          cd ..

      - name: Verify binary architecture (${{ matrix.arch }})
        run: |
          file src/dist/QtTinySA

      - name: Upload artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: QtTinySA_linux_${{ matrix.arch }}
          path: src/dist/QtTinySA
          if-no-files-found: error