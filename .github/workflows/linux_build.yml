name: Linux Build (x86_64 + ARM64)

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Linux x86_64 and ARM64 builds'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["x86_64", "arm64"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install QEMU (for ARM64 cross-build)
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu g++-aarch64-linux-gnu build-essential python3-dev libatlas-base-dev gfortran zlib1g-dev libssl-dev libffi-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev liblzma-dev
          # 安装 ARM64 特定的开发库
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libc6-dev:arm64 libssl-dev:arm64 libffi-dev:arm64 libbz2-dev:arm64 libreadline-dev:arm64 libsqlite3-dev:arm64 libncurses5-dev:arm64
          sudo update-binfmts --enable qemu-aarch64

      - name: Install dependencies (${{ matrix.arch }})
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            # 下载 Python 3.12 源代码
            wget https://www.python.org/ftp/python/3.12.3/Python-3.12.3.tar.xz
            tar -xf Python-3.12.3.tar.xz
            cd Python-3.12.3
            # 配置交叉编译
            ./configure --host=aarch64-linux-gnu --build=x86_64-linux-gnu --prefix=$(pwd)/  --prefix=$(pwd)/../arm64-python CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ CFLAGS="-I/usr/aarch64-linux-gnu/include" LDFLAGS="-L/usr/aarch64-linux-gnu/lib" --enable-optimizations --with-lto --disable-ipv6 --with-build-python=python3
            make -j$(nproc) || { cat config.log; exit 1; }
            make install || exit 1
            cd ..
            # 验证编译的 Python
            qemu-aarch64-static ./arm64-python/bin/python3.12 --version || exit 1
            # 安装 ARM64 依赖
            qemu-aarch64-static ./arm64-python/bin/python3.12 -m pip install --user --upgrade pip || exit 1
            qemu-aarch64-static ./arm64-python/bin/python3.12 -m pip install --user pyinstaller==6.12.0 -r src/requirements.txt || exit 1
          else
            python -m pip install --upgrade pip
            pip install pyinstaller==6.12.0 -r src/requirements.txt
          fi
      
      - name: Build with PyInstaller (${{ matrix.arch }})
        run: |
          cd src
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            qemu-aarch64-static ../arm64-python/bin/python3.12 -m PyInstaller QtTinySA.spec
          else
            python3 -m PyInstaller QtTinySA.spec
          fi
          mv dist/QtTinySA dist/QtTinySA_${{ matrix.arch }}
          cd ..

      - name: Verify binary architecture (${{ matrix.arch }})
        run: |
          file src/dist/QtTinySA

      - name: Upload artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: QtTinySA_linux_${{ matrix.arch }}
          path: src/dist/QtTinySA_${{ matrix.arch }}
          if-no-files-found: error